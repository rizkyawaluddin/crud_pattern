cara 2

repositoriy product
const addProduct = async(req,res) => {
    try {
        const dataProduct = await ProductModel.create(req.body)

        return dataProduct

    } catch(error) {
        console.log(error)
        return error
    }
}

//get products
const getProducts = async(req,res) => {
    try {
        const dataProducts = await ProductModel.findAll();

        return dataProducts

    } catch(error) {
        console.log(error)
        return error
    }
}

module.exports.addProduct = addProduct;
module.exports.getProducts = getProducts;

service product;
const addProduct = async (req,res) => {
    try {
        const createPro = await ProductRepository.addProduct(req)

        return createPro

    } catch(error){
        console.log(error)
        return error
    }
}

//find products
const getProducts = async(req,res) => {
    try {
        const findProducts = await ProductRepository.getProducts()

        return findProducts

    } catch(error) {
        console.log(error)
        return error
    }
}



module.exports.addProduct = addProduct;
module.exports.getProducts = getProducts;

controller product
async function ProductCreate(req,res)  {
    try{
        const responseProduct = await ProductService.addProduct(req);

        return res.send({
            'data' : responseProduct.body,
            'message' : 'Success',
            'data' : responseProduct,
            'status' :200
        })

    }catch(error){
        console.log(error)
        res.send({
            status: 'failed',
            message: 'server error'
        })
    }
}


async function Products(req,res)  {
    try{
        const responseProduct = await ProductService.getProducts();

        return res.send({
            'message' : 'Success',
            'data' : responseProduct,
            'status' :200
        })

    }catch(error){
        console.log(error)
        res.send({
            status: 'failed',
            message: 'server error'
        })
    }
}

module.exports.ProductCreate = ProductCreate;
module.exports.Products = Products;